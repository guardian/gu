import { exists } from 'https://deno.land/std@0.208.0/fs/exists.ts';
import { walk } from 'https://deno.land/std@0.208.0/fs/walk.ts';
import { resolve } from 'https://deno.land/std@0.208.0/path/resolve.ts';
import { NODE_MODULES_LAST_MODIFIED } from './keys.ts';

const nodeModulesPath = resolve(Deno.cwd(), 'node_modules');
const kv = await Deno.openKv();

export const storeNodeModulesLastModified = async () =>
	await kv.set(
		[NODE_MODULES_LAST_MODIFIED, nodeModulesPath],
		await getLocalNodeModulesLastModified(),
	);

export const getStoredNodeModulesLastModified = async () => {
	const stored = await kv.get([
		NODE_MODULES_LAST_MODIFIED,
		nodeModulesPath,
	]);

	if (stored.value) {
		return stored?.value as Date;
	}
};

/**
 * Check if any files in node_modules have changed. For perf reasons, this is limited to comparing the last modified date of json files up to 5 levels deep.
 */
export const getLocalNodeModulesLastModified = async () => {
	let latestDate = new Date(0);

	if ((await exists(nodeModulesPath))) {
		for await (
			const entry of walk(nodeModulesPath, {
				exts: ['json'],
				maxDepth: 5,
			})
		) {
			const stat = await Deno.stat(entry.path);
			if (stat.mtime && stat.mtime > latestDate) {
				latestDate = stat.mtime;
			}
		}
	} else {
		return undefined;
	}

	return latestDate;
};
